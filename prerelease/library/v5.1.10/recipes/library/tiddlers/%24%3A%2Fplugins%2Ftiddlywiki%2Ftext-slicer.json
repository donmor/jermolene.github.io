{
    "title": "$:/plugins/tiddlywiki/text-slicer",
    "description": "Tools for slicing text into tiddlers",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "list": "readme",
    "version": "5.1.10-prerelease",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/tiddlywiki/text-slicer/macros\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/macros\",\n            \"tags\": \"$:/tags/Macro\",\n            \"text\": \"\\\\define display-heading-tiddler(level:\\\"h1\\\")\\n<$level$><$view field=\\\"title\\\"/></$level$>\\n<$list filter='[tag<currentTiddler>]'>\\n<$tiddler>\\n<$transclude mode='block'/>\\n</$tiddler>\\n</$list>\\n\\\\end\\n\\n\\\\define display-list-tiddler(type:\\\"ol\\\")\\n<$type$>\\n<$list filter='[tag<currentTiddler>]'>\\n<li>\\n<$tiddler>\\n<$transclude mode='block'/>\\n</$tiddler>\\n</li>\\n</$list>\\n</$type$>\\n\\\\end\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/readme\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/readme\",\n            \"text\": \"This plugin contains tools to help slice up long texts into individual tiddlers.\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/ui/slice-button\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/ui/slice-button\",\n            \"tags\": \"$:/tags/ViewToolbar\",\n            \"caption\": \"{{$:/plugins/tiddlywiki/text-slicer/text-slicer-icon}} Slice tiddler\",\n            \"description\": \"Slice this tiddler by headings and lists\",\n            \"text\": \"<$button message=\\\"tm-slice-tiddler\\\" param=<<currentTiddler>> tooltip={{$:/language/Buttons/Clone/Hint}} aria-label={{$:/language/Buttons/Clone/Caption}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>prefix[yes]]\\\">\\n{{$:/plugins/tiddlywiki/text-slicer/text-slicer-icon}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>prefix[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">Slice tiddler</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/slicer.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/text-slicer/slicer.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nSetup the root widget event handlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"slicer\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nvar SLICER_OUTPUT_TITLE = \\\"$:/Import\\\";\\n\\n// Install the root widget event handlers\\nexports.startup = function() {\\n\\t$tw.rootWidget.addEventListener(\\\"tm-slice-tiddler\\\",function(event) {\\n\\t\\t// Slice up and output the tiddler\\n\\t\\toutputTiddlers(sliceTiddler(event.param));\\n\\t});\\n};\\n\\nvar currentId = 0;\\n\\nfunction nextId() {\\n\\treturn ++currentId;\\n}\\n\\n// Slice a tiddler into individual tiddlers\\nfunction sliceTiddler(title) {\\n\\tvar tiddlers = {},\\n\\t\\tparser = $tw.wiki.parseTiddler(title),\\n\\t\\tparentStack = [],\\n\\t\\taddTiddler = function(fields) {\\n\\t\\t\\tif(fields.title) {\\n\\t\\t\\t\\ttiddlers[fields.title] = $tw.utils.extend({},tiddlers[fields.title],fields);\\n\\t\\t\\t\\treturn fields.title;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\taddToList = function(parent,child) {\\n\\t\\t\\tvar parentTiddler = tiddlers[parent] || {},\\n\\t\\t\\t\\tparentList = parentTiddler.list || [];\\n\\t\\t\\tparentList.push(child);\\n\\t\\t\\taddTiddler($tw.utils.extend({title: parent},parentTiddler,{list: parentList}));\\n\\t\\t},\\n\\t\\tconvertTypeToLevel = function(type) {\\n\\t\\t\\tif(type.charAt(0) === \\\"h\\\") {\\n\\t\\t\\t\\treturn parseInt(type.charAt(1),10);\\t\\t\\t\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tpopParentStackUntil = function(type) {\\n\\t\\t\\t// Pop the stack to remove any entries at the same or lower level\\n\\t\\t\\tvar newLevel = convertTypeToLevel(type),\\n\\t\\t\\t\\ttopIndex = parentStack.length - 1;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tvar topLevel = convertTypeToLevel(parentStack[parentStack.length - 1].type);\\n\\t\\t\\t\\tif(topLevel !== null && topLevel < newLevel ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tparentStack.length--;\\n\\t\\t\\t} while(true);\\n\\t\\t\\treturn parentStack[parentStack.length - 1].title;\\n\\t\\t},\\n\\t\\tprocessNodeList = function(nodeList) {\\n\\t\\t\\t$tw.utils.each(nodeList,function(parseTreeNode) {\\n\\t\\t\\t\\tvar parentTitle,\\n\\t\\t\\t\\t\\ttext = $tw.utils.getParseTreeText(parseTreeNode);\\n\\t\\t\\t\\tif(parseTreeNode.type === \\\"element\\\" && (parseTreeNode.tag === \\\"h1\\\" || parseTreeNode.tag === \\\"h2\\\" || parseTreeNode.tag === \\\"h3\\\" || parseTreeNode.tag === \\\"h4\\\")) {\\n\\t\\t\\t\\t\\tparentTitle = popParentStackUntil(parseTreeNode.tag);\\n\\t\\t\\t\\t\\taddToList(parentTitle,text);\\n\\t\\t\\t\\t\\tparentStack.push({type: parseTreeNode.tag, title: addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: text,\\n\\t\\t\\t\\t\\t\\ttext: \\\"<<display-heading-tiddler level:'\\\" + parseTreeNode.tag + \\\"'>>\\\",\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t})});\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && (parseTreeNode.tag === \\\"ul\\\" || parseTreeNode.tag === \\\"ol\\\")) {\\n\\t\\t\\t\\t\\tvar listTitle = title + \\\"-list-\\\" + nextId();\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,listTitle);\\n\\t\\t\\t\\t\\tparentStack.push({type: parseTreeNode.tag, title: addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: listTitle,\\n\\t\\t\\t\\t\\t\\ttext: \\\"<<display-list-tiddler type:'\\\" + parseTreeNode.tag + \\\"'>>\\\",\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t})});\\n\\t\\t\\t\\t\\tprocessNodeList(parseTreeNode.children);\\n\\t\\t\\t\\t\\tparentStack.pop();\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && parseTreeNode.tag === \\\"li\\\") {\\n\\t\\t\\t\\t\\tvar listItemTitle = title + \\\"-listitem-\\\" + nextId();\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,listItemTitle);\\n\\t\\t\\t\\t\\taddTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: listItemTitle,\\n\\t\\t\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && parseTreeNode.tag === \\\"p\\\") {\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: title + \\\"-para-\\\" + nextId(),\\n\\t\\t\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t};\\n\\tif(parser) {\\n\\t\\tparentStack.push({type: \\\"h0\\\", title: addTiddler({\\n\\t\\t\\ttitle: \\\"Sliced up \\\" + title,\\n\\t\\t\\ttext: \\\"<div class='tc-table-of-contents'>\\\\n\\\\n<<toc-selective-expandable 'Sliced up \\\" + title + \\\"'>>\\\\n\\\\n</div>\\\\n<<display-heading-tiddler level:'h1'>>\\\",\\n\\t\\t\\tlist: []\\n\\t\\t})});\\n\\t\\tprocessNodeList(parser.tree);\\n\\t}\\n\\treturn tiddlers;\\n}\\n\\n// Output to the output tiddler\\nfunction outputTiddlers(tiddlers) {\\n\\t// Get the current slicer output tiddler\\n\\tvar slicerOutputTiddler = $tw.wiki.getTiddler(SLICER_OUTPUT_TITLE),\\n\\t\\tslicerOutputData = $tw.wiki.getTiddlerData(SLICER_OUTPUT_TITLE,{}),\\n\\t\\tnewFields = new Object({\\n\\t\\t\\ttitle: SLICER_OUTPUT_TITLE,\\n\\t\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\t\\\"plugin-type\\\": \\\"import\\\",\\n\\t\\t\\t\\\"status\\\": \\\"pending\\\"\\n\\t\\t});\\n\\t// Process each tiddler\\n\\tslicerOutputData.tiddlers = slicerOutputData.tiddlers || {};\\n\\t$tw.utils.each(tiddlers,function(tiddlerFields) {\\n\\t\\tvar title = tiddlerFields.title;\\n\\t\\tif(title) {\\n\\t\\t\\tslicerOutputData.tiddlers[title] = tiddlerFields;\\n\\t\\t}\\n\\t});\\n\\t// Save the slicer output tiddler\\n\\tnewFields.text = JSON.stringify(slicerOutputData,null,$tw.config.preferences.jsonSpaces);\\n\\t$tw.wiki.addTiddler(new $tw.Tiddler(slicerOutputTiddler,newFields));\\n\\t// TBD: Navigate to $:/Import\\n}\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/slicer.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/text-slicer-icon\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/text-slicer-icon\",\n            \"tags\": \"$:/tags/Image\",\n            \"text\": \"<svg class=\\\"tc-image-text-slicer tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\">\\n    <g fill-rule=\\\"evenodd\\\">\\n        <path d=\\\"M80,51.0155285 L59.5940359,64.2673166 L125.897873,107.325532 C128.030065,108.710193 128.646102,111.578842 127.255156,113.720711 C125.867041,115.858221 123.001365,116.472016 120.860813,115.081925 L51.1036068,69.7810657 L26.8517133,85.5304295 L26.8517087,85.5304319 C28.1651844,86.2022039 29.4191834,87.0428514 30.5829398,88.0544894 C38.2922474,94.7560882 39.1219848,106.423679 32.4362103,114.114783 C25.7504358,121.805887 14.080916,122.608039 6.3716084,115.90644 C-1.33769921,109.204841 -2.1674367,97.5372504 4.51833784,89.8461466 C5.83807302,88.3279649 7.35199779,87.0782085 8.99132065,86.1016058 L42.6131777,64.2673166 L42.6131777,64.2673166 L8.54310096,42.14195 C8.24323991,41.947218 7.97336572,41.7231352 7.73484365,41.4758511 C7.26854012,41.1408688 6.81356667,40.7813413 6.3716084,40.3971528 C-1.33769921,33.695554 -2.1674367,22.0279631 4.51833784,14.3368593 C11.2041124,6.64575553 22.8736321,5.84360327 30.5829398,12.5452021 C38.2922474,19.246801 39.1219848,30.9143918 32.4362103,38.6054956 C30.8132523,40.4724953 28.8966192,41.9335527 26.8142483,42.9798736 L51.1036068,58.7535674 L80,39.9880303 L80,51.0155285 Z M13.0048429,34.0671776 C12.7764349,33.9024698 12.5534894,33.725961 12.336801,33.5375966 C8.48191699,30.186597 8.06702347,24.3524532 11.4101104,20.5066717 C14.7531973,16.6608901 20.5883056,16.25979 24.4431896,19.6107896 C28.2980736,22.9617891 28.7129671,28.7959329 25.3698802,32.6417145 C22.5492464,35.8864825 17.954628,36.6790998 14.2721287,34.8349262 L13.5801614,34.3855571 C13.3934198,34.2642857 13.2011595,34.1582654 13.0048429,34.0671776 L13.0048429,34.0671776 Z M11.4101104,96.0159589 C8.06702347,99.8617405 8.48191699,105.695884 12.336801,109.046884 C16.191685,112.397883 22.0267933,111.996783 25.3698802,108.151002 C28.7129671,104.30522 28.2980736,98.4710764 24.4431896,95.1200768 C20.5883056,91.7690773 14.7531973,92.1701774 11.4101104,96.0159589 Z\\\"></path>\\n        <g transform=\\\"translate(81.000000, 0.000000)\\\">\\n            <circle transform=\\\"translate(5.000000, 52.000000) rotate(-90.000000) translate(-5.000000, -52.000000) \\\" cx=\\\"5\\\" cy=\\\"52\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 112.000000) rotate(-90.000000) translate(-5.000000, -112.000000) \\\" cx=\\\"5\\\" cy=\\\"112\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 124.000000) rotate(-90.000000) translate(-5.000000, -124.000000) \\\" cx=\\\"5\\\" cy=\\\"124\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 40.000000) rotate(-90.000000) translate(-5.000000, -40.000000) \\\" cx=\\\"5\\\" cy=\\\"40\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 100.316987) rotate(-90.000000) translate(-5.000000, -100.316987) \\\" cx=\\\"5\\\" cy=\\\"100.316987\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 28.000000) rotate(-90.000000) translate(-5.000000, -28.000000) \\\" cx=\\\"5\\\" cy=\\\"28\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 88.316987) rotate(-90.000000) translate(-5.000000, -88.316987) \\\" cx=\\\"5\\\" cy=\\\"88.3169873\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 16.000000) rotate(-90.000000) translate(-5.000000, -16.000000) \\\" cx=\\\"5\\\" cy=\\\"16\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 76.316987) rotate(-90.000000) translate(-5.000000, -76.316987) \\\" cx=\\\"5\\\" cy=\\\"76.3169873\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 4.000000) rotate(-90.000000) translate(-5.000000, -4.000000) \\\" cx=\\\"5\\\" cy=\\\"4\\\" r=\\\"4\\\"></circle>\\n            <circle transform=\\\"translate(5.000000, 64.316987) rotate(-90.000000) translate(-5.000000, -64.316987) \\\" cx=\\\"5\\\" cy=\\\"64.3169873\\\" r=\\\"4\\\"></circle>\\n        </g>\\n    </g>\\n</svg>\"\n        }\n    }\n}"
}