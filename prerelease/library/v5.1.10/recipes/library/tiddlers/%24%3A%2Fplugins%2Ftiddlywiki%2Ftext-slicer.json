{
    "title": "$:/plugins/tiddlywiki/text-slicer",
    "description": "Tools for slicing text into tiddlers",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "list": "readme docs",
    "version": "5.1.10-prerelease",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/tiddlywiki/text-slicer/docs\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/docs\",\n            \"text\": \"!! Text Slicing Approach\\n\\nIndividual tiddlers are created for each heading, paragraph and list item. They are linked together using TiddlyWiki's tagging mechanism.\\n\\nFor example, consider a tiddler titled ''Example'' containing this simple text:\\n\\n<<<\\n! This is a heading\\n\\nThis is a paragraph.\\n\\n* And the first list item\\n* Second list item\\n<<<\\n\\nIt will be sliced up into:\\n\\n* a tiddler for the overall document\\n** a tiddler for the heading\\n*** a tiddler for the paragraph\\n*** a tiddler for the list\\n**** and a tiddler for each list item\\n\\nThese tiddlers are bound together using tagging: child tiddlers are tagged with the title of their parent, and the parent tiddler has a ''list'' field that lists each child in the correct order.\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/icon\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/icon\",\n            \"tags\": \"$:/tags/Image\",\n            \"text\": \"<svg class=\\\"tc-image-text-slicer tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\">\\n    <g fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M64,0 L118.5596,32 L118.5596,96 L64,128 L9.44039956,96 L9.44039956,32 L64,0 Z\\\" ></path>\\n        <g transform=\\\"translate(32.000000, 32.000000) scale(2.19)\\\" fill=\\\"#ffffff\\\">\\n            {{$:/plugins/tiddlywiki/text-slicer/text-slicer-icon}}\\n        </g>\\n    </g>\\n</svg>\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/macros\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/macros\",\n            \"tags\": \"$:/tags/Macro\",\n            \"text\": \"\\\\define display-heading-tiddler(level:\\\"h1\\\")\\n<$level$><$view field=\\\"title\\\"/></$level$>\\n<$list filter='[tag<currentTiddler>!has[draft.of]]'>\\n<$tiddler>\\n{{||$:/plugins/tiddlywiki/text-slicer/templates/display-tiddler}}\\n</$tiddler>\\n</$list>\\n\\\\end\\n\\n\\\\define display-list-tiddler(type:\\\"ol\\\")\\n<$type$>\\n<$list filter='[tag<currentTiddler>!has[draft.of]]'>\\n<li>\\n<$tiddler>\\n{{||$:/plugins/tiddlywiki/text-slicer/templates/display-tiddler}}\\n</$tiddler>\\n</li>\\n</$list>\\n</$type$>\\n\\\\end\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/readme\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/readme\",\n            \"text\": \"//''This plugin is under active development, and is subject to change in the future''. It is currently only intended for advanced users. The tools are in the early stages of development, and likely to need some customisation to do what you need.//\\n\\nThis plugin contains tools to help slice up long texts into individual tiddlers.\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/ui/slice-button\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/ui/slice-button\",\n            \"tags\": \"$:/tags/ViewToolbar\",\n            \"list-before\": \"$:/core/ui/Buttons/edit\",\n            \"caption\": \"{{$:/plugins/tiddlywiki/text-slicer/text-slicer-icon}} Slice tiddler\",\n            \"description\": \"Slice this tiddler by headings and lists\",\n            \"text\": \"\\\\define hint()\\nSlice this tiddler by headings and lists\\n\\\\end\\n\\n<$button message=\\\"tm-slice-tiddler\\\" param=<<currentTiddler>> tooltip=<<hint>> aria-label=<<hint>> class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>prefix[yes]]\\\">\\n{{$:/plugins/tiddlywiki/text-slicer/text-slicer-icon}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>prefix[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">Slice tiddler</span>\\n</$list>\\n</$button>\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/slicer.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/text-slicer/slicer.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nSetup the root widget event handlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"slicer\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nvar SLICER_OUTPUT_TITLE = \\\"$:/TextSlicer\\\";\\n\\n// Install the root widget event handlers\\nexports.startup = function() {\\n\\t$tw.rootWidget.addEventListener(\\\"tm-slice-tiddler\\\",function(event) {\\n\\t\\t// Slice up and output the tiddler\\n\\t\\toutputTiddlers(sliceTiddler(event.param),event.param);\\n\\t});\\n};\\n\\nvar currentId = 0;\\n\\nfunction nextId() {\\n\\treturn ++currentId;\\n}\\n\\n// Slice a tiddler into individual tiddlers\\nfunction sliceTiddler(title) {\\n\\tvar tiddlers = {},\\n\\t\\tparser = $tw.wiki.parseTiddler(title),\\n\\t\\tparentStack = [],\\n\\t\\taddTiddler = function(fields) {\\n\\t\\t\\tif(fields.title) {\\n\\t\\t\\t\\ttiddlers[fields.title] = $tw.utils.extend({},tiddlers[fields.title],fields);\\n\\t\\t\\t\\treturn fields.title;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\taddToList = function(parent,child) {\\n\\t\\t\\tvar parentTiddler = tiddlers[parent] || {},\\n\\t\\t\\t\\tparentList = parentTiddler.list || [];\\n\\t\\t\\tparentList.push(child);\\n\\t\\t\\taddTiddler($tw.utils.extend({title: parent},parentTiddler,{list: parentList}));\\n\\t\\t},\\n\\t\\tconvertTypeToLevel = function(type) {\\n\\t\\t\\tif(type.charAt(0) === \\\"h\\\") {\\n\\t\\t\\t\\treturn parseInt(type.charAt(1),10);\\t\\t\\t\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tpopParentStackUntil = function(type) {\\n\\t\\t\\t// Pop the stack to remove any entries at the same or lower level\\n\\t\\t\\tvar newLevel = convertTypeToLevel(type),\\n\\t\\t\\t\\ttopIndex = parentStack.length - 1;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tvar topLevel = convertTypeToLevel(parentStack[parentStack.length - 1].type);\\n\\t\\t\\t\\tif(topLevel !== null && topLevel < newLevel ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tparentStack.length--;\\n\\t\\t\\t} while(true);\\n\\t\\t\\treturn parentStack[parentStack.length - 1].title;\\n\\t\\t},\\n\\t\\tprocessNodeList = function(nodeList) {\\n\\t\\t\\t$tw.utils.each(nodeList,function(parseTreeNode) {\\n\\t\\t\\t\\tvar parentTitle,\\n\\t\\t\\t\\t\\ttext = $tw.utils.getParseTreeText(parseTreeNode);\\n\\t\\t\\t\\tif(parseTreeNode.type === \\\"element\\\" && (parseTreeNode.tag === \\\"h1\\\" || parseTreeNode.tag === \\\"h2\\\" || parseTreeNode.tag === \\\"h3\\\" || parseTreeNode.tag === \\\"h4\\\")) {\\n\\t\\t\\t\\t\\tparentTitle = popParentStackUntil(parseTreeNode.tag);\\n\\t\\t\\t\\t\\taddToList(parentTitle,text);\\n\\t\\t\\t\\t\\tparentStack.push({type: parseTreeNode.tag, title: addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: text,\\n\\t\\t\\t\\t\\t\\ttext: \\\"<<display-heading-tiddler level:'\\\" + parseTreeNode.tag + \\\"'>>\\\",\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t})});\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && (parseTreeNode.tag === \\\"ul\\\" || parseTreeNode.tag === \\\"ol\\\")) {\\n\\t\\t\\t\\t\\tvar listTitle = title + \\\"-list-\\\" + nextId();\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,listTitle);\\n\\t\\t\\t\\t\\tparentStack.push({type: parseTreeNode.tag, title: addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: listTitle,\\n\\t\\t\\t\\t\\t\\ttext: \\\"<<display-list-tiddler type:'\\\" + parseTreeNode.tag + \\\"'>>\\\",\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t})});\\n\\t\\t\\t\\t\\tprocessNodeList(parseTreeNode.children);\\n\\t\\t\\t\\t\\tparentStack.pop();\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && parseTreeNode.tag === \\\"li\\\") {\\n\\t\\t\\t\\t\\tvar listItemTitle = title + \\\"-listitem-\\\" + nextId();\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,listItemTitle);\\n\\t\\t\\t\\t\\taddTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: listItemTitle,\\n\\t\\t\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t\\t\\tlist: [],\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else if(parseTreeNode.type === \\\"element\\\" && parseTreeNode.tag === \\\"p\\\") {\\n\\t\\t\\t\\t\\tparentTitle = parentStack[parentStack.length - 1].title;\\n\\t\\t\\t\\t\\taddToList(parentTitle,addTiddler({\\n\\t\\t\\t\\t\\t\\ttitle: title + \\\"-para-\\\" + nextId(),\\n\\t\\t\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t\\t\\ttags: [parentTitle]\\n\\t\\t\\t\\t\\t}));\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t};\\n\\tif(parser) {\\n\\t\\tparentStack.push({type: \\\"h0\\\", title: addTiddler({\\n\\t\\t\\ttitle: \\\"Sliced up \\\" + title,\\n\\t\\t\\ttext: \\\"{{||$:/plugins/tiddlywiki/text-slicer/templates/display-document}}\\\",\\n\\t\\t\\tlist: []\\n\\t\\t})});\\n\\t\\tprocessNodeList(parser.tree);\\n\\t}\\n\\treturn tiddlers;\\n}\\n\\n// Output to the output tiddler\\nfunction outputTiddlers(tiddlers,navigateFromTitle) {\\n\\t// Get the current slicer output tiddler\\n\\tvar slicerOutputTiddler = $tw.wiki.getTiddler(SLICER_OUTPUT_TITLE),\\n\\t\\tslicerOutputData = $tw.wiki.getTiddlerData(SLICER_OUTPUT_TITLE,{}),\\n\\t\\tnewFields = new Object({\\n\\t\\t\\ttitle: SLICER_OUTPUT_TITLE,\\n\\t\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\t\\\"plugin-type\\\": \\\"import\\\",\\n\\t\\t\\t\\\"status\\\": \\\"pending\\\"\\n\\t\\t});\\n\\t// Process each tiddler\\n\\tslicerOutputData.tiddlers = slicerOutputData.tiddlers || {};\\n\\t$tw.utils.each(tiddlers,function(tiddlerFields) {\\n\\t\\tvar title = tiddlerFields.title;\\n\\t\\tif(title) {\\n\\t\\t\\tslicerOutputData.tiddlers[title] = tiddlerFields;\\n\\t\\t}\\n\\t});\\n\\t// Save the slicer output tiddler\\n\\tnewFields.text = JSON.stringify(slicerOutputData,null,$tw.config.preferences.jsonSpaces);\\n\\t$tw.wiki.addTiddler(new $tw.Tiddler(slicerOutputTiddler,newFields));\\n\\t// Navigate to output\\n\\tvar story = new $tw.Story({wiki: $tw.wiki});\\n\\tstory.navigateTiddler(SLICER_OUTPUT_TITLE,navigateFromTitle);\\n}\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/slicer.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/templates/display-document\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/templates/display-document\",\n            \"text\": \"\\\\define config-show-toolbar()\\n$:/plugins/tiddlywiki/text-slicer/config/show-toolbar/$(currentTiddler)$\\n\\\\end\\n\\n\\\\define display-tiddler()\\n<$set name=\\\"tv-show-toolbar\\\" value={{$(config-show-toolbar)$}}>\\n<<display-heading-tiddler level:'h1'>>\\n</$set>\\n\\\\end\\n\\n<div class='tc-table-of-contents'>\\n\\n<$macrocall $name=\\\"toc-selective-expandable\\\" tag=<<currentTiddler>>/>\\n\\n</div>\\n\\n<$checkbox tiddler=<<config-show-toolbar>> field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> Show toolbar</$checkbox>\\n\\n<<display-tiddler>>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/templates/display-tiddler\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/templates/display-tiddler\",\n            \"text\": \"<$list filter=\\\"[<currentTiddler>!tag[advanced]]\\\" variable=\\\"isAdvanced\\\">\\n<$list filter=\\\"[<tv-show-toolbar>prefix[yes]]\\\" variable=\\\"hasToolbar\\\">\\n{{||$:/plugins/tiddlywiki/text-slicer/templates/tiddler-toolbar}}\\n</$list>\\n<$list filter=\\\"[draft.of<currentTiddler>limit[1]]\\\" editTemplate=\\\"$:/core/ui/EditTemplate\\\" emptyMessage=\\\"\\\"\\\"<$transclude mode='block'/>\\\"\\\"\\\"/>\\n</$list>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/templates/tiddler-toolbar\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/templates/tiddler-toolbar\",\n            \"text\": \"<div class=\\\"tc-slice-toolbar\\\" style=\\\"background:#def;\\\">\\n<$link><$text text=<<currentTiddler>>/></$link>\\n</div>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/text-slicer/text-slicer-icon\": {\n            \"title\": \"$:/plugins/tiddlywiki/text-slicer/text-slicer-icon\",\n            \"tags\": \"$:/tags/Image\",\n            \"text\": \"<svg class=\\\"tc-image-text-slicer tc-image-button\\\" width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\">\\n    <g fill-rule=\\\"evenodd\\\">\\n        <g transform=\\\"translate(-14.000000, -7.000000)\\\">\\n            <g transform=\\\"translate(72.584657, 72.467249) rotate(-315.000000) translate(-72.584657, -72.467249) translate(21.197294, 21.478238)\\\">\\n                <path d=\\\"M38.2417582,61.693607 L54.4992571,51.1358638 L1.67477118,16.8312416 C-0.0239526134,15.7280774 -0.514751641,13.4426154 0.593419494,11.7361815 C1.69933572,10.0332198 3.98242867,9.54420766 5.68781385,10.6516977 L61.26361,46.7430417 L80.5851735,34.1954717 L80.5851772,34.1954697 C79.5387267,33.6602668 78.5396616,32.9905201 77.6124931,32.1845448 C71.4704623,26.8453589 70.8094077,17.5497509 76.1359863,11.4222231 C81.4625649,5.29469534 90.7597098,4.65561799 96.9017406,9.9948039 C103.043771,15.3339898 103.704826,24.6295979 98.3782473,30.7571256 C97.32681,31.966666 96.1206611,32.9623511 94.8146072,33.7404136 L68.0279628,51.1358638 L68.0279628,51.1358638 L95.1717053,68.7632163 C95.4106056,68.91836 95.6256152,69.0968874 95.8156465,69.2938995 C96.1871521,69.560781 96.549631,69.8472178 96.9017406,70.153302 C103.043771,75.4924879 103.704826,84.7880959 98.3782473,90.9156237 C93.0516687,97.0431515 83.7545238,97.6822288 77.6124931,92.3430429 C71.4704623,87.003857 70.8094077,77.7082489 76.1359863,71.5807212 C77.4290023,70.0932764 78.9559902,68.9292471 80.615022,68.0956398 L61.26361,55.5286859 L38.2417582,70.4792512 L38.2417582,61.693607 L38.2417582,61.693607 Z M91.6170208,75.1964141 C91.7989942,75.3276374 91.9766156,75.4682625 92.149252,75.6183331 C95.2204507,78.2880854 95.5509978,82.936167 92.8875494,86.0001139 C90.2241011,89.0640607 85.575251,89.3836185 82.5040522,86.7138661 C79.4328535,84.0441137 79.1023064,79.3960321 81.7657548,76.3320853 C84.012963,73.7469679 87.6735107,73.115487 90.60737,74.5847463 L91.1586626,74.9427601 C91.3074402,75.0393774 91.4606147,75.1238441 91.6170208,75.1964141 L91.6170208,75.1964141 L91.6170208,75.1964141 Z M92.8875494,25.8416158 C95.5509978,22.7776689 95.2204507,18.1295874 92.149252,15.459835 C89.0780532,12.7900826 84.4292031,13.1096404 81.7657548,16.1735872 C79.1023064,19.237534 79.4328535,23.8856156 82.5040522,26.555368 C85.575251,29.2251204 90.2241011,28.9055626 92.8875494,25.8416158 L92.8875494,25.8416158 Z\\\"></path>\\n                <g transform=\\\"translate(31.868132, 50.989011) rotate(-180.000000) translate(-31.868132, -50.989011) translate(28.681319, -0.000000)\\\">\\n                    <path d=\\\"M6.37362637,41.4285714 C6.37362637,39.6685431 4.94684151,38.2417582 3.18681319,38.2417582 C1.42678486,38.2417582 -1.35783528e-13,39.6685431 -1.35891298e-13,41.4285714 C-1.35999069e-13,43.1885998 1.42678486,44.6153846 3.18681319,44.6153846 C4.94684151,44.6153846 6.37362637,43.1885998 6.37362637,41.4285714 L6.37362637,41.4285714 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,89.2307692 C6.37362637,87.4707409 4.94684151,86.043956 3.18681319,86.043956 C1.42678486,86.043956 -1.97956017e-13,87.4707409 -1.98063788e-13,89.2307692 C-1.98171558e-13,90.9907976 1.42678486,92.4175824 3.18681319,92.4175824 C4.94684151,92.4175824 6.37362637,90.9907976 6.37362637,89.2307692 L6.37362637,89.2307692 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,98.7912088 C6.37362637,97.0311805 4.94684151,95.6043956 3.18681319,95.6043956 C1.42678486,95.6043956 -1.30010368e-13,97.0311805 -1.30118138e-13,98.7912088 C-1.30225909e-13,100.551237 1.42678486,101.978022 3.18681319,101.978022 C4.94684151,101.978022 6.37362637,100.551237 6.37362637,98.7912088 L6.37362637,98.7912088 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,31.8681319 C6.37362637,30.1081035 4.94684151,28.6813187 3.18681319,28.6813187 C1.42678486,28.6813187 -2.06393712e-13,30.1081035 -2.06501483e-13,31.8681319 C-2.06609253e-13,33.6281602 1.42678486,35.0549451 3.18681319,35.0549451 C4.94684151,35.0549451 6.37362637,33.6281602 6.37362637,31.8681319 L6.37362637,31.8681319 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,79.9228745 C6.37362637,78.1628462 4.94684151,76.7360613 3.18681319,76.7360613 C1.42678486,76.7360613 -8.32992433e-15,78.1628462 -8.43769499e-15,79.9228745 C-8.54546564e-15,81.6829028 1.42678486,83.1096877 3.18681319,83.1096877 C4.94684151,83.1096877 6.37362637,81.6829028 6.37362637,79.9228745 L6.37362637,79.9228745 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,22.3076923 C6.37362637,20.547664 4.94684151,19.1208791 3.18681319,19.1208791 C1.42678486,19.1208791 4.27403348e-14,20.547664 4.26325641e-14,22.3076923 C4.25247935e-14,24.0677206 1.42678486,25.4945055 3.18681319,25.4945055 C4.94684151,25.4945055 6.37362637,24.0677206 6.37362637,22.3076923 L6.37362637,22.3076923 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,70.3624349 C6.37362637,68.6024066 4.94684151,67.1756217 3.18681319,67.1756217 C1.42678486,67.1756217 -8.32992433e-15,68.6024066 -8.43769499e-15,70.3624349 C-8.54546564e-15,72.1224633 1.42678486,73.5492481 3.18681319,73.5492481 C4.94684151,73.5492481 6.37362637,72.1224633 6.37362637,70.3624349 L6.37362637,70.3624349 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,12.7472527 C6.37362637,10.9872244 4.94684151,9.56043956 3.18681319,9.56043956 C1.42678486,9.56043956 -2.83139388e-14,10.9872244 -2.84217094e-14,12.7472527 C-2.85294801e-14,14.5072811 1.42678486,15.9340659 3.18681319,15.9340659 C4.94684151,15.9340659 6.37362637,14.5072811 6.37362637,12.7472527 L6.37362637,12.7472527 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,60.8019954 C6.37362637,59.0419671 4.94684151,57.6151822 3.18681319,57.6151822 C1.42678486,57.6151822 -7.89401087e-14,59.0419671 -7.90478794e-14,60.8019954 C-7.915565e-14,62.5620237 1.42678486,63.9888086 3.18681319,63.9888086 C4.94684151,63.9888086 6.37362637,62.5620237 6.37362637,60.8019954 L6.37362637,60.8019954 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,3.18681319 C6.37362637,1.42678486 4.94684151,3.37507799e-14 3.18681319,3.37507799e-14 C1.42678486,3.37507799e-14 -2.83139388e-14,1.42678486 -2.84217094e-14,3.18681319 C-2.85294801e-14,4.94684151 1.42678486,6.37362637 3.18681319,6.37362637 C4.94684151,6.37362637 6.37362637,4.94684151 6.37362637,3.18681319 L6.37362637,3.18681319 Z\\\"></path>\\n                    <path d=\\\"M6.37362637,51.2415558 C6.37362637,49.4815275 4.94684151,48.0547426 3.18681319,48.0547426 C1.42678486,48.0547426 -7.89401087e-14,49.4815275 -7.90478794e-14,51.2415558 C-7.915565e-14,53.0015841 1.42678486,54.428369 3.18681319,54.428369 C4.94684151,54.428369 6.37362637,53.0015841 6.37362637,51.2415558 L6.37362637,51.2415558 Z\\\"></path>\\n                </g>\\n            </g>\\n        </g>\\n    </g>\\n</svg>\\n\"\n        }\n    }\n}"
}