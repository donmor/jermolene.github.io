{
    "title": "$:/plugins/tiddlywiki/browser-storage",
    "description": "Local storage in the browser",
    "author": "Jeremy Ruston ",
    "core-version": ">=5.0.0",
    "list": "readme settings",
    "version": "5.1.20-prerelease",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/config/BrowserStorage/SaveFilter\": {\n            \"title\": \"$:/config/BrowserStorage/SaveFilter\",\n            \"text\": \"[is[tiddler]]\"\n        },\n        \"$:/plugins/tiddlywiki/browser-storage/rawmarkup.js\": {\n            \"title\": \"$:/plugins/tiddlywiki/browser-storage/rawmarkup.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/browser-storage/rawmarkup.js\\ntype: application/javascript\\nmodule-type: library\\n\\nStartup code injected as raw markup\\n\\n\\\\*/\\n\\n(function() {\\n\\n// Need to initialise these because we run before bootprefix.js and boot.js\\n$tw = window.$tw || Object.create(null);\\n$tw.hooks = $tw.hooks || { names: {}};\\n\\n// Hook the point in the startup process when the tiddlers have been loaded but plugins not unpacked\\nvar hookName = \\\"th-boot-tiddlers-loaded\\\";\\nif(Object.prototype.hasOwnProperty.call($tw.hooks.names,hookName)) {\\n\\t$tw.hooks.names[hookName].push(hookBootTiddlersLoaded);\\n} else {\\n\\t$tw.hooks.names[hookName] = [hookBootTiddlersLoaded];\\n}\\n\\n// Load tiddlers from browser storage\\nfunction hookBootTiddlersLoaded() {\\n\\tvar url = window.location.protocol === \\\"file:\\\" ? window.location.pathname : \\\"\\\";\\n\\t// Step through each browsder storage item\\n\\tfor(var index=0; index<window.localStorage.length; index++) {\\n\\t\\tvar key = window.localStorage.key(index),\\n\\t\\t\\tparts = key.split(\\\"#\\\");\\n\\t\\t// If it's ours\\n\\t\\tif(parts[0] === \\\"tw5\\\" && parts[1] === url) {\\n\\t\\t\\t// Read it as JSON\\n\\t\\t\\tvar jsonString = window.localStorage.getItem(key),\\n\\t\\t\\t\\tjsonData;\\n\\t\\t\\tif(jsonString) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tjsonData = JSON.parse(jsonString);\\n\\t\\t\\t\\t} catch(e) {}\\n\\t\\t\\t\\tif(jsonData) {\\n\\t\\t\\t\\t\\t// Convert it to a tiddler\\n\\t\\t\\t\\t\\tvar incomingTiddler = new $tw.Tiddler(jsonData);\\n\\t\\t\\t\\t\\tif(incomingTiddler) {\\n\\t\\t\\t\\t\\t\\t// Get any existing tiddler\\n\\t\\t\\t\\t\\t\\tvar title = incomingTiddler.fields.title,\\n\\t\\t\\t\\t\\t\\t\\texistingTiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\t\\t\\tif(existingTiddler && existingTiddler.isEqual(incomingTiddler)) {\\n\\t\\t\\t\\t\\t\\t\\t// If the incoming tiddler is the same as the existing then we can delete the local storage version\\n\\t\\t\\t\\t\\t\\t\\twindow.localStorage.removeItem(key);\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(\\\"Removing from local storage\\\",title)\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(incomingTiddler);\\n\\t\\t\\t\\t\\t\\tconsole.log(\\\"Loading from local storage\\\",title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/tiddlywiki/browser-storage/rawmarkup\": {\n            \"title\": \"$:/plugins/tiddlywiki/browser-storage/rawmarkup\",\n            \"tags\": \"$:/tags/RawMarkupWikified\",\n            \"text\": \"`<script>`\\n{{$:/plugins/tiddlywiki/browser-storage/rawmarkup.js}}\\n`</script>`\\n\"\n        },\n        \"$:/plugins/tiddlywiki/browser-storage/readme\": {\n            \"title\": \"$:/plugins/tiddlywiki/browser-storage/readme\",\n            \"text\": \"This plugin enables TiddlyWiki to save tiddlers in [[browser local storage|https://en.wikipedia.org/wiki/Web_storage#localStorage]]. This means that changes are stored within the browser, and automatically re-applied any time the base wiki is reloaded.\\n\\nAt startup, the plugin reads tiddlers from local storage. Any tiddlers that are identical to those built into the file are deleted from local storage. Once the wiki is up and running, any tiddler changes are written straight to local storage.\\n\\nBrowser local storage is not a panacea for TiddlyWiki:\\n\\n* Browsers limit the amount of local storage available to a page, typically to 5 or 10MB\\n* Keeping personal data in browser local storage can lead to unexpected privacy violations\\n* Browsers reserve the right to without warning delete data stored in local storage at any time\\n* Browsers tie local storage to a URL which can lead to problems if you move a wiki to a URL previously occupied by a different wiki\\n\\nPlease use this plugin with caution. There are a number of unresolved issues and open questions:\\n\\n* Innerwikis read the local storage of their parent wikis\\n* This plugin does not interfere with the existing saver mechanism, so you'll still get warnings when refreshing the page, even if your changes are safely committed to local storage\\n* Deleted tiddlers will be restored when the wiki is refreshed\\n\\n\"\n        },\n        \"$:/plugins/tiddlywiki/browser-storage/settings\": {\n            \"title\": \"$:/plugins/tiddlywiki/browser-storage/settings\",\n            \"text\": \"This filter determines which tiddlers will be saved to local storage. By default, it contains `[is[tiddler]]` meaning that it will attempt to save all tiddlers. Other useful values include `[prefix[$:/state/]]` to just save state tiddlers, thus preserving selected tabs, and the open/closed status of table of contents entries.\\n\\n<$link to=\\\"$:/config/BrowserStorage/SaveFilter\\\">Browser Storage Save Filter</$link>: <$edit-text tiddler=\\\"$:/config/BrowserStorage/SaveFilter\\\" default=\\\"\\\" tag=\\\"input\\\" size=\\\"50\\\"/>\\n\\nThis setting allows a custom alert message to be displayed when an attempt to store a tiddler fails due to the storage quota being exceeded:\\n\\n<$link to=\\\"$:/config/BrowserStorage/QuotaExceededAlert\\\">Quota Exceeded Alert</$link>: <$edit-text tiddler=\\\"$:/config/BrowserStorage/QuotaExceededAlert\\\" default=\\\"\\\" tag=\\\"input\\\" size=\\\"50\\\"/>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/browser-storage/startup.js\": {\n            \"title\": \"$:/plugins/tiddlywiki/browser-storage/startup.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/browser-storage/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nStartup initialisation\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"browser-storage\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"load-modules\\\"];\\nexports.synchronous = true;\\n\\nvar SAVE_FILTER_TITLE = \\\"$:/config/BrowserStorage/SaveFilter\\\",\\n\\tQUOTA_EXCEEDED_ALERT_TITLE = \\\"$:/config/BrowserStorage/QuotaExceededAlert\\\",\\n\\tDEFAULT_QUOTA_EXCEEDED_ALERT_PREFIX = \\\"Quota exceeded attempting to store `\\\",\\n\\tDEFAULT_QUOTA_EXCEEDED_ALERT_SUFFIX = \\\"` in browser local storage\\\";\\n\\nexports.startup = function() {\\n\\tvar self = this;\\n\\t// Compute our prefix for local storage keys\\n\\tvar url = window.location.protocol === \\\"file:\\\" ? window.location.pathname : \\\"\\\",\\n\\t\\tprefix = \\\"tw5#\\\" + url + \\\"#\\\";\\n\\t// Make a logger\\n\\tvar logger = new $tw.utils.Logger(\\\"browser-storage\\\",{\\n\\t\\t\\tcolour: \\\"cyan\\\"\\n\\t\\t});\\n\\t// Function to compile the filter\\n\\tvar filterFn,\\n\\t\\tcompileFilter = function() {\\n\\t\\t\\tfilterFn = $tw.wiki.compileFilter($tw.wiki.getTiddlerText(SAVE_FILTER_TITLE));\\n\\t}\\n\\tcompileFilter();\\n\\t// Track tiddler changes\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t// Recompile the filter if it has changed\\n\\t\\tif(changes[SAVE_FILTER_TITLE]) {\\n\\t\\t\\tcompileFilter();\\n\\t\\t}\\n\\t\\t// Filter the changes\\n\\t\\tvar filteredChanges = filterFn.call($tw.wiki,function(iterator) {\\n\\t\\t\\t$tw.utils.each(changes,function(change,title) {\\n\\t\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\titerator(tiddler,title);\\n\\t\\t\\t});\\n\\t\\t});\\nconsole.log(\\\"Filtered changes\\\",filteredChanges)\\n\\t\\t$tw.utils.each(filteredChanges,function(title) {\\n\\t\\t\\t// Get the tiddler\\n\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t// Get the JSON of the tiddler\\t\\t\\t\\t\\n\\t\\t\\t\\tvar json = JSON.stringify(tiddler.getFieldStrings());\\n\\t\\t\\t\\t// Try to save it to local storage\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\twindow.localStorage.setItem(prefix + title,json);\\n\\t\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\t\\tif(e.name === \\\"QuotaExceededError\\\") {\\n\\t\\t\\t\\t\\t\\t// Complain if we failed\\n\\t\\t\\t\\t\\t\\tvar msg = $tw.wiki.getTiddlerText(QUOTA_EXCEEDED_ALERT_TITLE,DEFAULT_QUOTA_EXCEEDED_ALERT_PREFIX + title + DEFAULT_QUOTA_EXCEEDED_ALERT_SUFFIX);\\n\\t\\t\\t\\t\\t\\tlogger.alert(msg);\\n\\t\\t\\t\\t\\t\\t// No point in keeping old values around for this tiddler\\n\\t\\t\\t\\t\\t\\twindow.localStorage.removeItem(prefix + title);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconsole.log(\\\"browser-storage: Saving\\\",title);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twindow.localStorage.removeItem(prefix + title);\\n\\t\\t\\t\\tconsole.log(\\\"browser-storage: Deleting\\\",title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n};\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        }\n    }\n}"
}