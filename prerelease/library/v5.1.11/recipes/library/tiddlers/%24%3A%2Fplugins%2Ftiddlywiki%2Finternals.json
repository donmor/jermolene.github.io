{
    "title": "$:/plugins/tiddlywiki/internals",
    "description": "Tools for exploring the internals of TiddlyWiki",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "list": "readme",
    "version": "5.1.12-prerelease",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/parse-tree\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/parse-tree\",\n            \"tags\": \"$:/tags/EditPreview\",\n            \"list-after\": \"$:/core/ui/EditTemplate/body/preview/output\",\n            \"caption\": \"parse tree\",\n            \"text\": \"\\\\define preview(mode,output)\\n<$parse-tree mode=\\\"$mode$\\\" output=\\\"$output$\\\"/>\\n\\\\end\\n\\n{{||$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/shared}}\\n\"\n        },\n        \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/raw\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/raw\",\n            \"tags\": \"$:/tags/EditPreview\",\n            \"caption\": \"raw HTML\",\n            \"list-after\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/widget-tree\",\n            \"text\": \"<pre><code><$view field=\\\"text\\\" format=\\\"htmlwikified\\\" /></code></pre>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/shared\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/shared\",\n            \"text\": \"\\\\define body()\\n\\nMode: <$select tiddler=\\\"$(tv-mode-configuration)$\\\" default=\\\"block\\\">\\n<option value=\\\"inline\\\">Inline</option>\\n<option value=\\\"block\\\">Block</option>\\n</$select>\\n\\n<$macrocall $name=\\\"preview\\\" mode={{$(tv-mode-configuration)$}} output={{$(tv-output-configuration)$}}/>\\n\\\\end\\n\\n<div class=\\\"tc-internal-tree-preview-wrapper\\\">\\n\\n<div class=\\\"tc-internal-tree-preview\\\">\\n\\n<$vars tv-mode-configuration=<<qualify \\\"$:/state/internals/preview/mode\\\">>>\\n\\n<<body>>\\n\\n</$vars>\\n\\n</div>\\n\\n</div>\\n\"\n        },\n        \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/widget-tree\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/widget-tree\",\n            \"tags\": \"$:/tags/EditPreview\",\n            \"caption\": \"widget tree\",\n            \"list-after\": \"$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/parse-tree\",\n            \"text\": \"\\\\define preview(mode,output)\\n<$widget-tree mode=\\\"$mode$\\\" output=\\\"$output$\\\"/>\\n\\\\end\\n\\n{{||$:/plugins/tiddlywiki/internals/EditTemplate/body/preview/shared}}\\n\"\n        },\n        \"$:/plugins/tiddlywiki/internals/readme\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/readme\",\n            \"text\": \"This plugin adds features to help explore the internals of TiddlyWiki:\\n\\n* New preview panes showing:\\n** the parse tree\\n** the widget tree\\n** the raw HTML output\\n\\nThe first two include a dropdown for choosing block vs. inline parsing mode.\\n\"\n        },\n        \"$:/plugins/tiddlywiki/internals/styles\": {\n            \"title\": \"$:/plugins/tiddlywiki/internals/styles\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\\n\"\n        },\n        \"$:/$:/plugins/tiddlywiki/internals/widgets/parse-tree.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/$:/plugins/tiddlywiki/internals/widgets/parse-tree.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to render the parse tree of a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ParseTreeWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nParseTreeWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nParseTreeWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nParseTreeWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.parseTreeTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.parseTreeInlineMode = this.getAttribute(\\\"mode\\\",\\\"block\\\") === \\\"inline\\\";\\n\\t// Compute the parse tree\\n\\tvar parser = this.wiki.parseTiddler(this.parseTreeTitle,{parseAsInline: this.parseTreeInlineMode}),\\n\\t\\tparseTreeNodes = [];\\n\\tif(parser) {\\n\\t\\tparseTreeNodes = [{\\n\\t\\t\\ttype: \\\"codeblock\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tcode: {type: \\\"string\\\", value: JSON.stringify(parser.tree,0,$tw.config.preferences.jsonSpaces)},\\n\\t\\t\\t\\tlanguage: {type: \\\"string\\\", value: \\\"json\\\"}\\n\\t\\t\\t}\\n\\t\\t}];\\n\\t}\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nParseTreeWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Completely rerender if any of our attributes have changed\\n\\tif(changedAttributes.tiddler || changedAttributes.mode || changedTiddlers[this.parseTreeTitle]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\\n\\nexports[\\\"parse-tree\\\"] = ParseTreeWidget;\\n\\n})();\\n\",\n            \"title\": \"$:/$:/plugins/tiddlywiki/internals/widgets/parse-tree.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/tiddlywiki/internals/widgets/widget-tree.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/internals/widgets/widget-tree.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to render the widget tree of a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar WidgetTreeWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nWidgetTreeWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nWidgetTreeWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nWidgetTreeWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.widgetTreeTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.widgetTreeInlineMode = this.getAttribute(\\\"mode\\\",\\\"block\\\") === \\\"inline\\\";\\n\\t// Compute the widget tree\\n\\tvar parser = this.wiki.parseTiddler(this.widgetTreeTitle,{parseAsInline: this.widgetTreeInlineMode}),\\n\\t\\tresults;\\n\\tif(parser) {\\n\\t\\tvar widgetNode = this.wiki.makeWidget(parser,{\\n\\t\\t\\t\\tparentWidget: this\\n\\t\\t\\t}),\\n\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\"),\\n\\t\\t\\tcopyNode = function(widgetNode,resultNode) {\\n\\t\\t\\t\\tvar type = widgetNode.parseTreeNode.type;\\n\\t\\t\\t\\tresultNode.type = type;\\n\\t\\t\\t\\tswitch(type) {\\n\\t\\t\\t\\t\\tcase \\\"element\\\":\\n\\t\\t\\t\\t\\t\\tresultNode.tag = widgetNode.parseTreeNode.tag;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\t\\t\\tresultNode.text = widgetNode.parseTreeNode.text;\\n\\t\\t\\t\\t\\t\\tbreak;\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(Object.keys(widgetNode.attributes || {}).length > 0) {\\n\\t\\t\\t\\t\\tresultNode.attributes = {};\\n\\t\\t\\t\\t\\t$tw.utils.each(widgetNode.attributes,function(attr,attrName) {\\n\\t\\t\\t\\t\\t\\tresultNode.attributes[attrName] = widgetNode.getAttribute(attrName);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(Object.keys(widgetNode.children || {}).length > 0) {\\n\\t\\t\\t\\t\\tresultNode.children = [];\\n\\t\\t\\t\\t\\t$tw.utils.each(widgetNode.children,function(widgetChildNode) {\\n\\t\\t\\t\\t\\t\\tvar node = {};\\n\\t\\t\\t\\t\\t\\tresultNode.children.push(node);\\n\\t\\t\\t\\t\\t\\tcopyNode(widgetChildNode,node);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\twidgetNode.render(container,null);\\n\\t\\tresults = {};\\n\\t\\tcopyNode(widgetNode,results);\\n\\t}\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets([{\\n\\t\\ttype: \\\"codeblock\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tcode: {type: \\\"string\\\", value: (results && results.children) ? JSON.stringify(results.children,0,$tw.config.preferences.jsonSpaces) : \\\"\\\"},\\n\\t\\t\\tlanguage: {type: \\\"string\\\", value: \\\"json\\\"}\\n\\t\\t}\\n\\t}]);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nWidgetTreeWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Completely rerender if any of our attributes have changed\\n\\tif(changedAttributes.tiddler || changedAttributes.mode || changedTiddlers[this.widgetTreeTitle]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\\n\\nexports[\\\"widget-tree\\\"] = WidgetTreeWidget;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/internals/widgets/widget-tree.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        }\n    }\n}"
}