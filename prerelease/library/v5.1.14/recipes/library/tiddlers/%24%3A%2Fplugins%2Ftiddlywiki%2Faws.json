{
    "title": "$:/plugins/tiddlywiki/aws",
    "description": "Tools for working with Amazon Web Services",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "list": "readme setup commands lambda",
    "version": "5.1.15-prerelease",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/tiddlywiki/aws/commands\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/commands\",\n            \"text\": \"{{$:/language/Help/aws}}\\n\"\n        },\n        \"$:/language/Help/aws\": {\n            \"title\": \"$:/language/Help/aws\",\n            \"description\": \"Operations for working with Amazon Web Services\",\n            \"text\": \"! Commands\\n\\nPerform operation on Amazon Web Services\\n\\n```\\n--aws <sub-command> [<parameter> ...]\\n```\\n\\n! \\\"s3-savetiddler\\\" subcommand\\n\\nSave a raw tiddler to a file in an S3 bucket.\\n\\n```\\n--aws s3-savetiddler <title> <region> <bucket> <filename> <zipfilename>\\n```\\n\\n* ''title'': title of the tiddler to save\\n* ''bucket'': name of the bucket to save the saved file\\n* ''filename'': filename of the saved file\\n* ''zipfilename'': optional; the file will be packed into a ZIP file with the specified name\\n\\n! \\\"s3-rendertiddler\\\" subcommand\\n\\nSave the results of rendering a tiddler to a file in an S3 bucket.\\n\\n```\\n--aws s3-rendertiddler <title> <region> <bucket> <filename> <type> <template> <zipfilename> <savetype>\\n```\\n\\n* ''title'': title of the tiddler to render\\n* ''bucket'': name of the bucket to save the rendered file\\n* ''filename'': filename of the rendered file\\n* ''type'': optional render type (defaults to \\\"text/html\\\")\\n* ''template'': optional template (defaults to directly rendering the tiddler without using a template)\\n* ''zipfilename'': optional; the file will be packed into a ZIP file with the specified name\\n* ''savetype'': optional; the MIME type for the saved file (defaults to ''type'' or \\\"text/html\\\")\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambda\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambda\",\n            \"text\": \"! Template\\n\\nThe template [[$:/plugins/tiddlywiki/aws/lambdas/main]] transcludes everything required to render a TiddlyWiki as an AWS Lambda function.\\n\\nThe Lambda is build with this command:\\n\\n```\\ntiddlywiki editions/aws --rendertiddler $:/plugins/tiddlywiki/aws/lambdas/main index.js text/plain\\n```\\n\\nOr:\\n\\n```\\ntiddlywiki editions/aws --build lambda\\n```\\n\\n! Execution\\n\\nThe Lambda boot code looks for an array of tiddlers to load in `event.tiddlers`, and an array of commands to execute in `event.commands`. For example:\\n\\n```\\n{\\n\\t\\\"commands\\\": [\\n\\t\\t\\\"--aws\\\",\\\"s3-rendertiddler\\\",\\\"HelloThere\\\",\\\"eu-west-2\\\",\\\"my-bucket-name\\\",\\\"rendered.html\\\"\\n\\t],\\n\\t\\\"tiddlers\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"title\\\": \\\"HelloThere\\\",\\n\\t\\t\\t\\\"text\\\": \\\"Hello from {{Platform}}.\\\"\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"title\\\": \\\"Platform\\\",\\n\\t\\t\\t\\\"text\\\": \\\"TiddlyWiki\\\"\\n\\t\\t}\\n\\t]\\n}\\n\\n```\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/readme\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/readme\",\n            \"text\": \"This plugin provides several tools for working with Amazon Web Services:\\n\\n* Templates for saving a TiddlyWiki as a single JavaScript file in a ZIP file that can be executed as an AWS Lambda function. In this form, TiddlyWiki is a self contained single file containing both code and data, just like the standalone HTML file configuration\\n* Commands that can be used to interact with AWS services, under both the Node.js and Lambda configurations of TiddlyWiki\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/setup\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/setup\",\n            \"text\": \"! Introduction\\n\\n!! About Amazon Web Services\\n\\nAmazon Web Services is a collection of online APIs to services that allow cloud-based applications to be built. It is a commercial service that charges usage fees, but there is a free tier that is sufficient for most personal use.\\n\\nAn ordinary Amazon account can be used to sign into the AWS console at https://aws.amazon.com/console/. Here you can see a menu of the available services and use interactive dashboards to inspect and configure resources.\\n\\n! Getting Started\\n\\n!! Setup Amazon Credentials\\n\\nThe main root account has super-user privileges across all the resources owned by the account. The Identity and Access Management (IAM) service allows subsidiary user accounts to be created for specific tasks. Here we create a new user account for running TiddlyWiki code:\\n\\n# Visit the AWS console at https://aws.amazon.com/console/\\n# Choose ''IAM'' from the ''Services'' dropdown menu\\n# Choose ''Users'' from the left hand menu\\n# Click the ''Create New Users'' button\\n# Enter ''tiddlywiki'' as the first user name\\n# Check the box labelled //Generate an access key for each user//\\n# Click the ''Create'' button\\n# Click the ''Download Credentials'' button to download a file called \\\"credentials.csv\\\"\\n#* The file contains three values:\\n#*# ''User Name'': Username for\\n#*# ''Password'': \\n#*# ''Direct Signin Link'': \\n# Create a text file with the following content:\\n#> <div><pre><code>[default]\\naws_access_key_id = &lt;your access key>\\naws_secret_access_key = &lt;your secret access key>\\n</code></pre></div>\\n# Save the file as `~/.aws/credentials` (Mac/Linux) or `?` (Windows)\\n\\n!! Download or Clone TiddlyWiki Repository\\n\\nEven if you have already installed TiddlyWiki, you should create a new installation for working with the AWS plugin.\\n\\nVisit the TiddlyWiki5 repository at https://github.com/Jermolene/TiddlyWiki5. You can either download or clone a copy:\\n\\n* Download to get up and running quickly\\n* Clone to make it easier to upgrade in the future\\n\\n!! Install `aws-sdk`\\n\\nOpen a command terminal, switch to the directory where TiddlyWiki is installed and run the following command:\\n\\n```\\nnpm install aws-sdk\\n```\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/command.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/aws/command.js\\ntype: application/javascript\\nmodule-type: command\\n\\n--aws command\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar async,\\n\\tawsUtils;\\n\\nexports.info = {\\n\\tname: \\\"aws\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tasync = require(\\\"$:/plugins/tiddlywiki/async/async.js\\\");\\n\\tawsUtils = require(\\\"$:/plugins/tiddlywiki/aws/utils.js\\\");\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this,\\n\\t\\twiki = this.commander.wiki,\\n\\t\\tsubCommand = this.params[0],\\n\\t\\tfn = this.subCommands[subCommand];\\n\\tif(!fn) {\\n\\t\\treturn this.callback(\\\"AWS: Unknown subcommand\\\")\\n\\t}\\n\\tfn.bind(this)();\\n\\treturn null;\\n};\\n\\nCommand.prototype.subCommands = {};\\n\\n// Render a tiddler to an S3 bucket\\nCommand.prototype.subCommands[\\\"s3-rendertiddler\\\"] = function() {\\n\\tvar self = this,\\n\\t\\twiki = this.commander.wiki,\\n\\t\\ttitle = this.params[1],\\n\\t\\tregion = this.params[2],\\n\\t\\tbucket = this.params[3],\\n\\t\\tfilename = this.params[4],\\n\\t\\ttype = this.params[5] || \\\"text/html\\\",\\n\\t\\ttemplate = this.params[6],\\n\\t\\tzipfilename = this.params[7],\\n\\t\\tsaveType = this.params[8] || type,\\n\\t\\tvariables = {};\\n\\t// Process the template if present\\n\\tif(template) {\\n\\t\\tvariables.currentTiddler = title;\\n\\t\\ttitle = template;\\n\\t}\\n\\t// Render the tiddler\\n\\tvar text = this.commander.wiki.renderTiddler(type,title,{variables: variables}),\\n\\t\\ttype = \\\"text/plain\\\",\\n\\t\\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"}).encoding;\\n\\t// Zip it if needed\\n\\tif(zipfilename) {\\n\\t\\tvar JSZip = require(\\\"$:/plugins/tiddlywiki/jszip/jszip.js\\\"),\\n\\t\\t\\tzip = new JSZip();\\n\\t\\tzip.file(filename,new Buffer(text,encoding));\\n\\t\\ttext = zip.generate({type: \\\"base64\\\"});\\n\\t\\ttype = \\\"application/zip\\\";\\n\\t\\tfilename = zipfilename;\\n\\t}\\n\\t// Save the file\\n\\tasync.series([\\n\\t\\tawsUtils.putFile.bind(null,region,bucket,filename,text,saveType)\\n\\t],\\n\\tfunction(err,results){\\n\\t\\tself.callback(err,results);\\n\\t});\\n\\treturn null;\\n};\\n\\n// Save a tiddler to an S3 bucket\\nCommand.prototype.subCommands[\\\"s3-savetiddler\\\"] = function() {\\n\\tvar self = this,\\n\\t\\twiki = this.commander.wiki,\\n\\t\\ttitle = this.params[1],\\n\\t\\tregion = this.params[2],\\n\\t\\tbucket = this.params[3],\\n\\t\\tfilename = this.params[4],\\n\\t\\tzipfilename = this.params[5],\\n\\t\\ttiddler = wiki.getTiddler(title),\\n\\t\\ttext = tiddler.fields.text,\\n\\t\\ttype = tiddler.fields.type,\\n\\t\\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"}).encoding;\\n\\t// Zip it if needed\\n\\tif(zipfilename) {\\n\\t\\tvar JSZip = require(\\\"$:/plugins/tiddlywiki/jszip/jszip.js\\\"),\\n\\t\\t\\tzip = new JSZip();\\n\\t\\tzip.file(filename,new Buffer(text,encoding));\\n\\t\\ttext = zip.generate({type: \\\"base64\\\"});\\n\\t\\ttype = \\\"application/zip\\\";\\n\\t\\tfilename = zipfilename;\\n\\t}\\n\\t// Save the file\\n\\tasync.series([\\n\\t\\tawsUtils.putFile.bind(null,region,bucket,filename,text,type)\\n\\t],\\n\\tfunction(err,results){\\n\\t\\tself.callback(err,results);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/aws/command.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"command\"\n        },\n        \"$:/plugins/tiddlywiki/aws/init.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/aws/init.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nAWS initialisation\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"aws-init\\\";\\nexports.before = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n\\tvar logger = new $tw.utils.Logger(\\\"aws\\\");\\n\\t\\tif($tw.node) {\\n\\t\\ttry {\\n\\t\\t\\trequire(\\\"aws-sdk\\\");\\n\\t\\t} catch(e) {\\n\\t\\t\\tlogger.alert(\\\"The plugin 'tiddlywiki/aws' requires the aws-sdk to be installed. Run 'npm install aws-sdk' in the root of the TiddlyWiki repository\\\");\\n\\t\\t}\\n\\t}\\n\\tif(!$tw.modules.titles[\\\"$:/plugins/tiddlywiki/async/async.js\\\"]) {\\n\\t\\tlogger.alert(\\\"The plugin 'tiddlywiki/aws' requires the 'tiddlywiki/async' plugin to be installed\\\");\\n\\t}\\n\\tif(!$tw.modules.titles[\\\"$:/plugins/tiddlywiki/jszip/jszip.js\\\"]) {\\n\\t\\tlogger.alert(\\\"The plugin 'tiddlywiki/aws' requires the 'tiddlywiki/jszip' plugin to be installed\\\");\\n\\t}\\n};\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/aws/init.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/tiddlywiki/aws/utils.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tiddlywiki/aws/utils.js\\ntype: application/javascript\\nmodule-type: library\\n\\nAWS utility functions\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nPut a file to an S3 bucket\\n*/\\nfunction putFile(region,bucketName,title,text,type,callback) {\\nconsole.log(\\\"Writing file\\\",bucketName,title,type)\\n\\tvar AWS = require(\\\"aws-sdk\\\"),\\n\\t\\ts3bucket = new AWS.S3({\\n\\t\\tregion: region\\n\\t}),\\n\\t\\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"}).encoding,\\n\\t\\tparams = {\\n\\t\\t\\tBucket: bucketName,\\n\\t\\t\\tKey: title,\\n\\t\\t\\tBody: new Buffer(text,encoding),\\n\\t\\t\\tContentType: type || \\\"text/plain\\\"\\n\\t\\t};\\n\\ts3bucket.upload(params,callback);\\n}\\n\\nexports.putFile = putFile;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/tiddlywiki/aws/utils.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"library\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambda/handler\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambda/handler\",\n            \"type\": \"text/plain\",\n            \"text\": \"/*\\nTiddlyWiki for AWS\\n*/\\n\\nexports.handler = function(event,context,callback) {\\n\\t// Initialise the boot prefix\\n\\tglobal.$tw = _bootprefix();\\n\\t// Some default package info\\n\\t$tw.packageInfo = lambdaPackageInfo;\\n\\t// Load any tiddlers from the package\\n\\t$tw.preloadTiddlerArray(lambdaTiddlers);\\n\\t// Load any tiddlers from the event\\n\\tif(event.tiddlers) {\\n\\t\\t$tw.preloadTiddlerArray(event.tiddlers);\\t\\n\\t}\\n\\t// Load the commands from the event\\n\\t$tw.boot.argv = (event.commands || []).slice(0);\\n\\t// Boot the TW5 app\\n\\t_boot($tw);\\n\\t$tw.boot.boot(function() {\\n\\t\\tcallback(null,\\\"TiddlyWiki execution successful\\\");\\n\\t});\\n}\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambdas/main\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambdas/main\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline\\n\\n/*\\n{{ $:/core/copyright.txt }}\\n*/\\n\\n{{$:/plugins/tiddlywiki/aws/lambda/tiddlers}}\\n\\n{{$:/plugins/tiddlywiki/aws/lambda/sjcl}}\\n\\n{{ $:/boot/bootprefix.js ||$:/core/templates/plain-text-tiddler}}\\n\\n{{ $:/boot/boot.js ||$:/core/templates/plain-text-tiddler}}\\n\\n{{$:/plugins/tiddlywiki/aws/lambda/package-info}}\\n\\n{{ $:/plugins/tiddlywiki/aws/lambda/handler ||$:/core/templates/plain-text-tiddler}}\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambda/package-info\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambda/package-info\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline codeinline macrocallinline\\n`\\nvar lambdaPackageInfo = {\\n\\t\\\"version\\\": \\\"`<<version>>`\\\",\\n\\t\\\"engines\\\": {\\n\\t\\t\\\"node\\\": \\\">=0.8.2\\\"\\n\\t}\\n};\\n`\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambda/sjcl\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambda/sjcl\",\n            \"text\": \"\\\\rules only filteredtranscludeinline transcludeinline\\n\\n(function() {\\n\\nvar module;\\n\\nglobal.sjcl = (function() {\\n\\n{{ $:/library/sjcl.js ||$:/core/templates/plain-text-tiddler}}\\n\\nreturn sjcl;\\n\\n})();\\n\\n})();\\n\"\n        },\n        \"$:/plugins/tiddlywiki/aws/lambda/tiddlers\": {\n            \"title\": \"$:/plugins/tiddlywiki/aws/lambda/tiddlers\",\n            \"text\": \"`\\nvar lambdaTiddlers = `<$text text=<<jsontiddlers \\\"[all[tiddlers]]\\\">>/>`;\\n`\\n\"\n        }\n    }\n}"
}